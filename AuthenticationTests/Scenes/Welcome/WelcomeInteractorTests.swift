//
//  WelcomeInteractorTests.swift
//  Authentication
//
//  Created by Raymond Law on 10/26/17.
//  Copyright (c) 2017 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Authentication
import XCTest

class WelcomeInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: WelcomeInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupWelcomeInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupWelcomeInteractor()
  {
    sut = WelcomeInteractor()
  }
  
  // MARK: Test doubles
  
  class WelcomePresentationLogicSpy: WelcomePresentationLogic
  {
    var presentLoginCalled = false
    var presentLoginResponse: Welcome.Login.Response!
    
    func presentLogin(response: Welcome.Login.Response)
    {
      presentLoginCalled = true
      presentLoginResponse = response
    }
  }
  
  // MARK: Tests
  
  // MARK: Dummy
  
  class WelcomeWorkerDummy: WelcomeWorker
  {
    override func login(email: String, password: String, completionHandler: @escaping (Bool, String?) -> Void)
    {
      completionHandler(false, nil)
    }
  }
  
  func testLoginShouldAskPresenterToFormatResult()
  {
    // Given
    let dummy = WelcomeWorkerDummy()
    sut.worker = dummy
    let spy = WelcomePresentationLogicSpy()
    sut.presenter = spy
    let request = Welcome.Login.Request(email: "any", password: "any")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertTrue(spy.presentLoginCalled, "login(request:) should ask the presenter to format the result")
  }
  
  // MARK: Stub
  
  class WelcomeWorkerStub: WelcomeWorker
  {
    override func login(email: String, password: String, completionHandler: @escaping (Bool, String?) -> Void)
    {
      completionHandler(true, "Hello there")
    }
  }
  
  func testLoginShouldSaveLoggedInStatusOnSuccess()
  {
    // Given
    let stub = WelcomeWorkerStub()
    sut.worker = stub
    let request = Welcome.Login.Request(email: "any", password: "any")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertTrue(sut.isLoggedIn, "login(request:) should set login status to true on success")
  }
  
  // MARK: Spy
  
  class WelcomeWorkerSpy: WelcomeWorker
  {
    var loginCalled = false
    
    override func login(email: String, password: String, completionHandler: @escaping (Bool, String?) -> Void)
    {
      loginCalled = true
      completionHandler(true, "Hello there")
    }
  }
  
  func testLoginShouldAskWorkerToLoginUsingSpy()
  {
    // Given
    let spy = WelcomeWorkerSpy()
    sut.worker = spy
    let request = Welcome.Login.Request(email: "any", password: "any")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertTrue(spy.loginCalled, "login(request:) should ask the worker to login")
  }
  
  // MARK: Mock
  
  class WelcomeWorkerMock: WelcomeWorker
  {
    var loginCalled = false
    
    func verifyLoginIsCalled() -> Bool
    {
      return loginCalled
    }
    
    override func login(email: String, password: String, completionHandler: @escaping (Bool, String?) -> Void)
    {
      loginCalled = true
      completionHandler(true, "Hello there")
    }
  }
  
  func testLoginShouldAskWorkerToLoginUsingMock()
  {
    // Given
    let mock = WelcomeWorkerMock()
    sut.worker = mock
    let request = Welcome.Login.Request(email: "any", password: "any")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertTrue(mock.verifyLoginIsCalled(), "login(request:) should ask the worker to login")
  }
  
  // MARK: Fake
  
  class WelcomeWorkerFake: WelcomeWorker
  {
    override func login(email: String, password: String, completionHandler: @escaping (Bool, String?) -> Void)
    {
      if email == "good" && password == "good" {
        completionHandler(true, "Hello there")
      } else {
        completionHandler(false, nil)
      }
    }
  }
  
  func testLoginShouldPassUsernameToPresenterOnSuccess()
  {
    // Given
    let fake = WelcomeWorkerFake()
    sut.worker = fake
    let spy = WelcomePresentationLogicSpy()
    sut.presenter = spy
    let request = Welcome.Login.Request(email: "good", password: "good")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertTrue(spy.presentLoginResponse.success, "login(request:) with valid email and password should result in success")
    XCTAssertNotNil(spy.presentLoginResponse.username, "login(request:) with valid email and password should result in a valid username")
  }
  
  func testLoginShouldNotPassUsernameToPresenterOnFailure()
  {
    // Given
    let fake = WelcomeWorkerFake()
    sut.worker = fake
    let spy = WelcomePresentationLogicSpy()
    sut.presenter = spy
    let request = Welcome.Login.Request(email: "bad", password: "bad")
    
    // When
    sut.login(request: request)
    
    // Then
    XCTAssertFalse(spy.presentLoginResponse.success, "login(request:) with invalid email and password should result in failure")
    XCTAssertNil(spy.presentLoginResponse.username, "login(request:) with invalid email and password should result in an invalid username")
  }
}
